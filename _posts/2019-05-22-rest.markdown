---
layout: post
title: "REST 란"
date: 2019-05-22
categories:
  - REST
description:
image: /image/rest/rest.png
image-sm: /image/rest/rest.png

---
<!-- {:.post-img.small}
![producer](/image/rabbitmq/producer.png) -->


REST 란
==============
<br />

### REST 정의
<br />

 - "Representational State Transfer"의 약자
 - 자원을 이름으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다.
 - 자원(Resource)의 표현(Representation)에 의한 상태 전달
 - JSON 혹은 XML을 통해 데이터를 주고받는 것이 일반적이다.
 - 월드 와이드 웹(www)과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 개발 아키텍처의 한 형식
 - REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일이다.
 - REST는 네트워크 상에서 Client와 Server사이의 통신 방식 중 하나이다.
<br /><br />

### REST의 구체적인 개념
<br />

 - HTTP URI(Uniform Resource Identifier)를 통해 자원을 명시
 - HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용한다.
 - REST는 자원 기반의 구조(ROA, Resource Oriented Architecture)설계의 중심에 Resource가 있고 HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍처를 의미한다.
 - 웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여한다.
 - CRUD Operation
    - Create : 생성(POST)
    - Read : 조회(GET)
    - Update : 수정(PUT)
    - Delete : 삭제(Delete)
    - HEAD : header 정보 조회(HEAD)

  <br />

### REST 장점
<br>

 - HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다.
 - HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.
 - HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.
 - REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.
 - 서버와 클라이언트의 역할을 명확히 분리한다.

 <br />

### REST 단점

<br />
 - 표준이 존재하지 않는다.
 - 사용할 수 있는 메소드가 4가지 밖에 없다.
 - 구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.
<br />
<br />

### REST 구성 요소
<br />

 1. 자원(Resource) : URI
    - 모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.
    - 자원을 구별하는 ID는 '/groups/:group_id'와 같은 HTTP URI이다.
    - Client URI를 이용하여 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 Server에 요청한다.
 2. 행위(Verb) : HTTP Method
    - HTTP 프로토콜의 Method를 사용한다.
    - HTTP 프로토콜은 GET, POST, PUT, DELETE 와 같은 메서드를 제공한다.
 3. 표현(Representation of Resource)
    - Client가 자원의 상태(정보)에 대한 조작을 요청하면 Server는 이에 적절한 응답(Representation)을 보낸다.
    - REST에서 하나의 자원은 JSON, XML, TEXT, RSS등 여러 형태의 Representation으로 나타내어 질 수 있다.
    - JSON 혹은 XML를 통해 데이터를 주고 받는 것이 일반적이다.

<br />
<br />

### REST 특징
<br />
 1. Server-Client 구조
    - 자원을 가지고 있는 Server, 자원을 요청하는 Client
        - REST Server : API를 제공하고 비즈니스 로직 처리 및 저장을 책임진다.
        - Client : 사용자 인증이나 context(세션, 로그인 정보)등을 직접 관리하고 책임진다.
    - 서버와 클라이언트 간의 의존성이 줄어든다.
 2. Stateless(무상태)
    - HTTP 프로토콜은 Stateless Protocol이므로 REST역시 무상태성을 갖는다.
    - Client의 context를 Server에 저장하지 않는다.
    - Server는 각각의 요청을 완전히 별개의 것으로 인식하고 처리한다.
        - 이전 요청이 다음 요청의 처리에 연관되어서는 안된다.
        - Server의 처리 방식에 일관성ㅇ르 부여하고 부담이 줄어들며, 서비스의 자유도가 높아진다.
 3. Cacheable(캐시 처리 가능)
    - 웹 표준 HTTP 프로토콜을 그대로 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있다.
    - HTTP가 가진 가장 강력한 특징 중 하나인 캐싱 기능을 적용할 수 있다.
    - Last-Modified 태그나 E-Tag를 이용하면 캐싱 구현이 가능하다.
    - 대량의 요청을 효율적으로 처리하기 위해 캐시가 요구된다.

 4. Layered System(계층화)
    - Client는 REST API Server만 호출한다.
    - REST Server는 다중 계층으로 구성될 수 있다.
        - API Server는 순수 비즈니스 로직을 수행하고 그 앞단에 보안, 로드밸런싱, 암호화, 사용자 인증 등을 추가하여 구조상의 유연성ㅇ르 줄 수 있다.
        - 로드밸런싱, 공유 캐시 등을 통해 확장성과 보안성을 향상시킬 수 있다.
    - Proxy, 게이트 웨이 같은 네트워크 기반의 중간 매체를 사용할 수 있다.

 5. 인터페이스 일관성
    - URI로 지정한 Resource에 대한 조작을 통일되고 한정적인 인터페이스로 수행한다.
    - HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.