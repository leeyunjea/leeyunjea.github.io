---
layout: post
title: "GET과 POST의 차이"
comments: true
date: 2019-05-22
tags: [web, get, post]
categories:
  - WEB
description:
image: /image/web/http.png
image-sm: /image/web/web.png

---
<!-- {:.post-img.small}
![producer](/image/rabbitmq/producer.png) -->


### HTTP
<br />
HTTP는 웹상에서 클라이언트와 서버 간에 요청/응답으로 데이터를 주고 받을 수 있는 프로토콜입니다. 클라이언트가 HTTp 프로토콜을 통해 서버에게 요청을 보내면 서버는 요청에 맞는 응답을 클라이언트에게 전송합니다. 이 때, HTTP 요청에 포함되는 HTTP메소드는 서버가 요청을 수행하기 위해 해야할 행동을 표시하는 용도로 사용합니다. 이 HTTP메소드 중 GET과 POST의 특징과 차이점을 알아본다.

<br>
### GET
<br />

 - HTTP/1.1 스펙인 RFC2616의 Section9.3에 따르면 GET은 서버로부터 정보를 조회하기 위해 설계된 메소드
 - GET은 요청을 전송할 때 필요한 데이터를 Body에 담지 않고, 쿼리스트링을 통해 전송
 - URL의 끝에 ?와 함께 이름과 값으로 쌍을 이루는 요청 파라미터를 쿼리스트링이라고 부른다.
 - 요청 파라미터가 여러 개이면 &로 연결한다.
 - 쿼리스트링을 사용하게 되면 URL에 조회 조건을 표시하기 때문에 특정 페이지를 링크하거나 북마크할 수 있다.
 - Ex) www.example-url.com/resources?name1=value1&name2=value2
 - GET은 불필요한 요청을 제한하기 위해 요청이 캐시될 수 있다.
 - js, css, 이미지 같은 정적 컨텐츠는 데이터양이 크고, 변경될 일이 적어서 반복해서 동일한 요청을 보낼 필요가 없다.
 - 정적 컨텐츠를 요청하고 나면 브라우저에서는 요청을 캐시해두고, 동일한 요청이 발생할 때 서버로 요청을 보내지 않고 캐시된 데이터를 사용한다. 그래서 프론트엔드 개발을 하다보면 정적 컨텐츠가 캐시돼 컨텐츠를 변경해도 내용이 바뀌지 않는 경우가 종종 발생한다. 이 때는 브라우저의 캐시를 지워주면 다시 컨텐츠를 조회하기 위해 서버로 요청을 보내게 된다.


<br>
### POST
<br />

 - POST는 리소스를 생성/변경하기 위해 설계되었기 때문에 GET과 달리 전송해야될 데이터를 HTTP 메세지의 Body에 담아서 전송한다.
 -  HTTP 메세지의 Body는 길이의 제한없이 데이터를 전송할 수 있다.
 - 그래서 POST 요청은 GET과 달리 대용량 데이터를 전송할 수 있다.
 - 이처럼 POST는 데이터가 Body로 전송되고 내용이 눈에 보이지 않아 GET보다 보안적인 면에서 안전하다고 생각할 수 있지만, POST 요청도 크롬 개발자 도구, Fiddler와 같은 툴로 요청 내용을 확인할 수 있기 때문에 민감한 데이터의 경우에는 반드시 암호화해 전송해야 한다.
 -  POST로 요청을 보낼 때는 요청 헤더의 Content-Type에 요청 데이터의 타입을 표시해야 한다.
 - 데이터 타입을 표시하지 않으면 서버는 내용이나 URL에 포함된 리소스의 확장자명 등으로 데이터 타입을 유추한다. 만약, 알 수 없는 경우에는 application/octet-stream로 요청을 처리한다.
<br /><br />

### GET과 POST의 차이
<br />

 - GET은 Idempotent, POST는 Non-idempotent하게 설계되어있다.
 - Idempotent(멱등)은 수학적 개념으로 연산을 여러번 적용하더라도 결과가 달라지지 않는 성질을 의미한다.
 - GET으로 서버에게 동일한 요청을 여러번 전송하더라고 동일한 응답이 돌아와야 한다.
 - 이에 따라 GET은 설계원칙에 따라 서버의 데이터나 상태를 변경시키지 않아야 Idempotent하기 때문에 주로 조회를 할 때 사용한다.

 <br>
 - POST는 Idempotent하기 때문에 서버에게 동일한 요청을 여러 번 전송해도 응답은 항상 다를 수 있다.
 - POST는 서버의 상태나 데이터를 변경시킬 때 사용된다.
 - POST는 생성, 수정, 삭제에 사용할 수 있지만, 생성에는 POST, 수정은 PUT, 삭제는 DELETE가 용도에 알맞는 메소드라고 할 수 있다.

 <br>
 - 마지막으로 웹페이지를 조회할 때, 링크를 통해 특정 페이지로 바로 이동하려면 해당 링크와 관련된 정보가 필요한데 POST는 요청 데이터가 Body에 담겨 있기 때문에 링크 정보를 가져올 수 없다.
 - 반면 GET은 URL에 요청 파라미티를 가지고 있기 때문에 링크를 걸 때, URL에 파라미터를 사용해 더 디테일하게 페이지를 링크할 수 있다.
 
<br /><br />


