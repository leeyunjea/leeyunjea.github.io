---
layout: post
title: "REST API 란"
comments: true
date: 2019-05-22
tags: [rest]
categories:
  - REST
description:
image: /image/rest/restapi.png
image-sm: /image/rest/rest.png

---
<!-- {:.post-img.small}
![producer](/image/rabbitmq/producer.png) -->



<br />

- API(Application Programming Interface)란
    - 데이터와 기능의 집합을 제공하여 컴퓨터 프로그램간 상호작용을 촉진하여, 서로 정보를 교환 가능하도록 하는 것
- REST API의 정의
    - REST 기반으로 서비스 API를 구현한 것
    - 최근 OpenAPI, 마이크로 서비스 등을 제공하는 업체 대부분은 REST API를 제공한다.

<br>
### REST API 의 특징
<br />

 - 사내 시스템들도 REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다.
 - REST는 HTTP표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램 언어로 클라이언트, 서버를 구현할 수 있다.
 - REST API를 제작하면 델파이 클라이언트 뿐 아니라, 자바, C#, 웹 등을 이용해 클라이언트를 제작할 수 있다.
<br /><br />

### REST API 설계 기본 규칙
<br />
1. 슬래시 구분자(/)는 계층 관계를 나타내는데 사용한다.
    - http://restapi.example.com/house/apartments
2. URI 마지막 문자로 슬래시(/)를 포함하지 않는다.
    - URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 리소스가 다르면 역시 URI도 달라져야 한다.
    - http://restapi.example.com/house/apartments/ (x)
3. 하이픈(-)은 URI 가독성을 높이는데 사용
    - 불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 이용해 가독성을 높인다.
4. 밑줄(_)은 URI에 사용하지 않는다.
    - 밑줄은 보기 어렵거나 밑줄 때문에 문자가 가려지기도 하므로 가독성을 위해 밑줄은 사용하지 않는다.
5. URI경로에는 소문자가 적합하다.
    - URI 경로에 대문자 사용은 피하도록 한다.
    - RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문
6. 파일확장자는 URI에 포함하지 않는다.
    - REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.
    - Accept header를 사용한다.
    - http://restapi.example.com/house/apartments/photo.jpg (x)
    - GET /house/apartments/ HTTP/1.1 Host:restapi.example.com Accept: photo/jpg (o)
7. 리소스 간에 연관관계가 있는 경우
    - /리소스명/리소스ID/관계가 있는 다른 리소스명
    - GET : /house/{houseid}/apartment (일반적으로 소유 'has'의 관계를 표한 할 때)

<br />

### REST API 설계 예시
<br>

| <span style="color:green">CRUD</span> || <span style="color:green">HTTP verbs</span> || <span style="color:green">Route</span> |
|:--------||:--------||:--------|
| resource들의 목록을 표시 || GET || /resource |
| resource 하나의 내용을 표시 || GET || /resource/:id |
| resource를 생성 || POST || /resource |
| resource를 수정 || PUT || /resource/:id |
| resource를 삭제 || DELETE || /resource/:id |


 <br />

### 참고 : 응답상태코드

<br />
 - 1xx : 전송 프로토콜 수준의 정보 교환
 - 2xx : 클라이언트 요청이 성공적으로 수행됨
 - 3xx : 클라이언트는 요청을 완료하기 위해 추가적인 행동을 취해야 함
 - 4xx : 클라이언트의 잘못된 요청
 - 5xx : 서버쪽 오류로 인한 상태코드
<br />
<br />
